package mh;

import java.awt.Graphics;

/**
 * <pre>
 *  Compact form of Hershey Simplex font.
 * 
 *  origin: at upper left of cell.
 *  x positive to the right
 *  y positive down
 * 
 *             'A'       '['    ...  example characters
 *  line
 *    0:  o---------+   [[[[    -----------------
 *        |             [       0 ... 3 = 4
 *    4:  +    A        [       --- ascent
 *        |  A   A      [
 *        | A     A     [       4 ... 25 = 22 nominal character height
 *        | AAAAAAA     [
 *  25:   + A     A     [       --- base line
 *        |             [       26...32 = 8
 *  32:   +---------+   [[[[    -----------------
 * 
 *  character height = 22
 *  cell height: 33 (then '()[]{}/|[' on subsequent lines just touch)
 *  cell with: [8 ... 30]
 *  0x7f = 127 is a "pen up" code, the pen is lowered again at the next point
 * </pre>
 * 
 * @author Martin Hepperle
 * 
 */
public class VectorFontSimplex
{
	private boolean m_monospaced = true;
	private boolean m_italic = true;
	private int m_sizeX = 18;
	private int m_sizeY = 22;

	// Simplex
	byte charVector[][] = {
			{ /* ASCII 32 ' ' */
			16, 0, // width, number of points
					// space: empty
			},
			{ /* ASCII 33 '!' */
			10, 15, 0x05, 0x04, 0x05, 0x12, 0x7f, 0x05, 0x17, 0x04, 0x18, 0x05,
					0x19, 0x06, 0x18, 0x05, 0x17 },
			{ /* ASCII 34 '' */
			16, 9, 0x04, 0x04, 0x04, 0x0b, 0x7f, 0x0c, 0x04, 0x0c, 0x0b },
			{ /* ASCII 35 '#' */
			21, 19, 0x0b, 0x00, 0x04, 0x20, 0x7f, 0x11, 0x00, 0x0a, 0x20, 0x7f,
					0x04, 0x0d, 0x12, 0x0d, 0x7f, 0x03, 0x13, 0x11, 0x13 },
			{ /* ASCII 36 '$' */
			20, 50, 0x08, 0x00, 0x08, 0x1d, 0x7f, 0x0c, 0x00, 0x0c, 0x1d, 0x7f,
					0x11, 0x07, 0x0f, 0x05, 0x0c, 0x04, 0x08, 0x04, 0x05, 0x05,
					0x03, 0x07, 0x03, 0x09, 0x04, 0x0b, 0x05, 0x0c, 0x07, 0x0d,
					0x0d, 0x0f, 0x0f, 0x10, 0x10, 0x11, 0x11, 0x13, 0x11, 0x16,
					0x0f, 0x18, 0x0c, 0x19, 0x08, 0x19, 0x05, 0x18, 0x03, 0x16 },
			{ /* ASCII 37 '%' */
			24, 60, 0x15, 0x04, 0x03, 0x19, 0x7f, 0x08, 0x04, 0x0a, 0x06, 0x0a,
					0x08, 0x09, 0x0a, 0x07, 0x0b, 0x05, 0x0b, 0x03, 0x09, 0x03,
					0x07, 0x04, 0x05, 0x06, 0x04, 0x08, 0x04, 0x0a, 0x05, 0x0d,
					0x06, 0x10, 0x06, 0x13, 0x05, 0x15, 0x04, 0x7f, 0x11, 0x12,
					0x0f, 0x13, 0x0e, 0x15, 0x0e, 0x17, 0x10, 0x19, 0x12, 0x19,
					0x14, 0x18, 0x15, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x12 },
			{ /* ASCII 38 '&' */
			26, 68, 0x17, 0x0d, 0x17, 0x0c, 0x16, 0x0b, 0x15, 0x0b, 0x14, 0x0c,
					0x13, 0x0e, 0x11, 0x13, 0x0f, 0x16, 0x0d, 0x18, 0x0b, 0x19,
					0x07, 0x19, 0x05, 0x18, 0x04, 0x17, 0x03, 0x15, 0x03, 0x13,
					0x04, 0x11, 0x05, 0x10, 0x0c, 0x0c, 0x0d, 0x0b, 0x0e, 0x09,
					0x0e, 0x07, 0x0d, 0x05, 0x0b, 0x04, 0x09, 0x05, 0x08, 0x07,
					0x08, 0x09, 0x09, 0x0c, 0x0b, 0x0f, 0x10, 0x16, 0x12, 0x18,
					0x14, 0x19, 0x16, 0x19, 0x17, 0x18, 0x17, 0x17 },
			{ /* ASCII 39 ''' */
			10, 14, 0x05, 0x06, 0x04, 0x05, 0x05, 0x04, 0x06, 0x05, 0x06, 0x07,
					0x05, 0x09, 0x04, 0x0a },
			{ /* ASCII 40 '(' */
			14, 20, 0x0b, 0x00, 0x09, 0x02, 0x07, 0x05, 0x05, 0x09, 0x04, 0x0e,
					0x04, 0x12, 0x05, 0x17, 0x07, 0x1b, 0x09, 0x1e, 0x0b, 0x20 },
			{ /* ASCII 41 ')' */
			14, 20, 0x03, 0x00, 0x05, 0x02, 0x07, 0x05, 0x09, 0x09, 0x0a, 0x0e,
					0x0a, 0x12, 0x09, 0x17, 0x07, 0x1b, 0x05, 0x1e, 0x03, 0x20 },
			{ /* ASCII 42 '*' */
			16, 14, 0x08, 0x04, 0x08, 0x10, 0x7f, 0x03, 0x07, 0x0d, 0x0d, 0x7f,
					0x0d, 0x07, 0x03, 0x0d },
			{ /* ASCII 43 '+' */
			26, 9, 0x0d, 0x07, 0x0d, 0x19, 0x7f, 0x04, 0x10, 0x16, 0x10 },
			{ /* ASCII 44 ',' */
			10, 16, 0x06, 0x18, 0x05, 0x19, 0x04, 0x18, 0x05, 0x17, 0x06, 0x18,
					0x06, 0x1a, 0x05, 0x1c, 0x04, 0x1d },
			{ /* ASCII 45 '-' */
			26, 4, 0x04, 0x10, 0x16, 0x10 },
			{ /* ASCII 46 '.' */
			10, 10, 0x05, 0x17, 0x04, 0x18, 0x05, 0x19, 0x06, 0x18, 0x05, 0x17 },
			{ /* ASCII 47 '/' */
			22, 4, 0x14, 0x00, 0x02, 0x20 },
			{ /* ASCII 48 '0' */
			20, 34, 0x09, 0x04, 0x06, 0x05, 0x04, 0x08, 0x03, 0x0d, 0x03, 0x10,
					0x04, 0x15, 0x06, 0x18, 0x09, 0x19, 0x0b, 0x19, 0x0e, 0x18,
					0x10, 0x15, 0x11, 0x10, 0x11, 0x0d, 0x10, 0x08, 0x0e, 0x05,
					0x0b, 0x04, 0x09, 0x04 },
			{ /* ASCII 49 '1' */
			20, 8, 0x06, 0x08, 0x08, 0x07, 0x0b, 0x04, 0x0b, 0x19 },
			{ /* ASCII 50 '2' */
			20, 28, 0x04, 0x09, 0x04, 0x08, 0x05, 0x06, 0x06, 0x05, 0x08, 0x04,
					0x0c, 0x04, 0x0e, 0x05, 0x0f, 0x06, 0x10, 0x08, 0x10, 0x0a,
					0x0f, 0x0c, 0x0d, 0x0f, 0x03, 0x19, 0x11, 0x19 },
			{ /* ASCII 51 '3' */
			20, 30, 0x05, 0x04, 0x10, 0x04, 0x0a, 0x0c, 0x0d, 0x0c, 0x0f, 0x0d,
					0x10, 0x0e, 0x11, 0x11, 0x11, 0x13, 0x10, 0x16, 0x0e, 0x18,
					0x0b, 0x19, 0x08, 0x19, 0x05, 0x18, 0x04, 0x17, 0x03, 0x15 },
			{ /* ASCII 52 '4' */
			20, 11, 0x0d, 0x04, 0x03, 0x12, 0x12, 0x12, 0x7f, 0x0d, 0x04, 0x0d,
					0x19 },
			{ /* ASCII 53 '5' */
			20, 34, 0x0f, 0x04, 0x05, 0x04, 0x04, 0x0d, 0x05, 0x0c, 0x08, 0x0b,
					0x0b, 0x0b, 0x0e, 0x0c, 0x10, 0x0e, 0x11, 0x11, 0x11, 0x13,
					0x10, 0x16, 0x0e, 0x18, 0x0b, 0x19, 0x08, 0x19, 0x05, 0x18,
					0x04, 0x17, 0x03, 0x15 },
			{ /* ASCII 54 '6' */
			20, 46, 0x10, 0x07, 0x0f, 0x05, 0x0c, 0x04, 0x0a, 0x04, 0x07, 0x05,
					0x05, 0x08, 0x04, 0x0d, 0x04, 0x12, 0x05, 0x16, 0x07, 0x18,
					0x0a, 0x19, 0x0b, 0x19, 0x0e, 0x18, 0x10, 0x16, 0x11, 0x13,
					0x11, 0x12, 0x10, 0x0f, 0x0e, 0x0d, 0x0b, 0x0c, 0x0a, 0x0c,
					0x07, 0x0d, 0x05, 0x0f, 0x04, 0x12 },
			{ /* ASCII 55 '7' */
			20, 9, 0x11, 0x04, 0x07, 0x19, 0x7f, 0x03, 0x04, 0x11, 0x04 },
			{ /* ASCII 56 '8' */
			20, 58, 0x08, 0x04, 0x05, 0x05, 0x04, 0x07, 0x04, 0x09, 0x05, 0x0b,
					0x07, 0x0c, 0x0b, 0x0d, 0x0e, 0x0e, 0x10, 0x10, 0x11, 0x12,
					0x11, 0x15, 0x10, 0x17, 0x0f, 0x18, 0x0c, 0x19, 0x08, 0x19,
					0x05, 0x18, 0x04, 0x17, 0x03, 0x15, 0x03, 0x12, 0x04, 0x10,
					0x06, 0x0e, 0x09, 0x0d, 0x0d, 0x0c, 0x0f, 0x0b, 0x10, 0x09,
					0x10, 0x07, 0x0f, 0x05, 0x0c, 0x04, 0x08, 0x04 },
			{ /* ASCII 57 '9' */
			20, 46, 0x10, 0x0b, 0x0f, 0x0e, 0x0d, 0x10, 0x0a, 0x11, 0x09, 0x11,
					0x06, 0x10, 0x04, 0x0e, 0x03, 0x0b, 0x03, 0x0a, 0x04, 0x07,
					0x06, 0x05, 0x09, 0x04, 0x0a, 0x04, 0x0d, 0x05, 0x0f, 0x07,
					0x10, 0x0b, 0x10, 0x10, 0x0f, 0x15, 0x0d, 0x18, 0x0a, 0x19,
					0x08, 0x19, 0x05, 0x18, 0x04, 0x16 },
			{ /* ASCII 58 ':' */
			10, 21, 0x05, 0x0b, 0x04, 0x0c, 0x05, 0x0d, 0x06, 0x0c, 0x05, 0x0b,
					0x7f, 0x05, 0x17, 0x04, 0x18, 0x05, 0x19, 0x06, 0x18, 0x05,
					0x17 },
			{ /* ASCII 59 ';' */
			10, 27, 0x05, 0x0b, 0x04, 0x0c, 0x05, 0x0d, 0x06, 0x0c, 0x05, 0x0b,
					0x7f, 0x06, 0x18, 0x05, 0x19, 0x04, 0x18, 0x05, 0x17, 0x06,
					0x18, 0x06, 0x1a, 0x05, 0x1c, 0x04, 0x1d },
			{ /* ASCII 60 '<' */
			24, 6, 0x14, 0x07, 0x04, 0x10, 0x14, 0x19 },
			{ /* ASCII 61 '=' */
			26, 9, 0x04, 0x0d, 0x16, 0x0d, 0x7f, 0x04, 0x13, 0x16, 0x13 },
			{ /* ASCII 62 '>' */
			24, 6, 0x04, 0x07, 0x14, 0x10, 0x04, 0x19 },
			{ /* ASCII 63 '?' */
			18, 39, 0x03, 0x09, 0x03, 0x08, 0x04, 0x06, 0x05, 0x05, 0x07, 0x04,
					0x0b, 0x04, 0x0d, 0x05, 0x0e, 0x06, 0x0f, 0x08, 0x0f, 0x0a,
					0x0e, 0x0c, 0x0d, 0x0d, 0x09, 0x0f, 0x09, 0x12, 0x7f, 0x09,
					0x17, 0x08, 0x18, 0x09, 0x19, 0x0a, 0x18, 0x09, 0x17 },
			{ /* ASCII 64 '@' */
			27, 107, 0x12, 0x0c, 0x11, 0x0a, 0x0f, 0x09, 0x0c, 0x09, 0x0a,
					0x0a, 0x09, 0x0b, 0x08, 0x0e, 0x08, 0x11, 0x09, 0x13, 0x0b,
					0x14, 0x0e, 0x14, 0x10, 0x13, 0x11, 0x11, 0x7f, 0x0c, 0x09,
					0x0a, 0x0b, 0x09, 0x0e, 0x09, 0x11, 0x0a, 0x13, 0x0b, 0x14,
					0x7f, 0x12, 0x09, 0x11, 0x11, 0x11, 0x13, 0x13, 0x14, 0x15,
					0x14, 0x17, 0x12, 0x18, 0x0f, 0x18, 0x0d, 0x17, 0x0a, 0x16,
					0x08, 0x14, 0x06, 0x12, 0x05, 0x0f, 0x04, 0x0c, 0x04, 0x09,
					0x05, 0x07, 0x06, 0x05, 0x08, 0x04, 0x0a, 0x03, 0x0d, 0x03,
					0x10, 0x04, 0x13, 0x05, 0x15, 0x07, 0x17, 0x09, 0x18, 0x0c,
					0x19, 0x0f, 0x19, 0x12, 0x18, 0x14, 0x17, 0x15, 0x16, 0x7f,
					0x13, 0x09, 0x12, 0x11, 0x12, 0x13, 0x13, 0x14 },
			{ /* ASCII 65 'A' */
			18, 14, 0x09, 0x04, 0x01, 0x19, 0x7f, 0x09, 0x04, 0x11, 0x19, 0x7f,
					0x04, 0x12, 0x0e, 0x12 },
			{ /* ASCII 66 'B' */
			21, 44, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x04, 0x04, 0x0d, 0x04, 0x10,
					0x05, 0x11, 0x06, 0x12, 0x08, 0x12, 0x0a, 0x11, 0x0c, 0x10,
					0x0d, 0x0d, 0x0e, 0x7f, 0x04, 0x0e, 0x0d, 0x0e, 0x10, 0x0f,
					0x11, 0x10, 0x12, 0x12, 0x12, 0x15, 0x11, 0x17, 0x10, 0x18,
					0x0d, 0x19, 0x04, 0x19 },
			{ /* ASCII 67 'C' */
			21, 36, 0x12, 0x09, 0x11, 0x07, 0x0f, 0x05, 0x0d, 0x04, 0x09, 0x04,
					0x07, 0x05, 0x05, 0x07, 0x04, 0x09, 0x03, 0x0c, 0x03, 0x11,
					0x04, 0x14, 0x05, 0x16, 0x07, 0x18, 0x09, 0x19, 0x0d, 0x19,
					0x0f, 0x18, 0x11, 0x16, 0x12, 0x14 },
			{ /* ASCII 68 'D' */
			21, 29, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x04, 0x04, 0x0b, 0x04, 0x0e,
					0x05, 0x10, 0x07, 0x11, 0x09, 0x12, 0x0c, 0x12, 0x11, 0x11,
					0x14, 0x10, 0x16, 0x0e, 0x18, 0x0b, 0x19, 0x04, 0x19 },
			{ /* ASCII 69 'E' */
			19, 19, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x04, 0x04, 0x11, 0x04, 0x7f,
					0x04, 0x0e, 0x0c, 0x0e, 0x7f, 0x04, 0x19, 0x11, 0x19 },
			{ /* ASCII 70 'F' */
			18, 14, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x04, 0x04, 0x11, 0x04, 0x7f,
					0x04, 0x0e, 0x0c, 0x0e },
			{ /* ASCII 71 'G' */
			21, 43, 0x12, 0x09, 0x11, 0x07, 0x0f, 0x05, 0x0d, 0x04, 0x09, 0x04,
					0x07, 0x05, 0x05, 0x07, 0x04, 0x09, 0x03, 0x0c, 0x03, 0x11,
					0x04, 0x14, 0x05, 0x16, 0x07, 0x18, 0x09, 0x19, 0x0d, 0x19,
					0x0f, 0x18, 0x11, 0x16, 0x12, 0x14, 0x12, 0x11, 0x7f, 0x0d,
					0x11, 0x12, 0x11 },
			{ /* ASCII 72 'H' */
			22, 14, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x12, 0x04, 0x12, 0x19, 0x7f,
					0x04, 0x0e, 0x12, 0x0e },
			{ /* ASCII 73 'I' */
			8, 4, 0x04, 0x04, 0x04, 0x19 },
			{ /* ASCII 74 'J' */
			16, 20, 0x0c, 0x04, 0x0c, 0x14, 0x0b, 0x17, 0x0a, 0x18, 0x08, 0x19,
					0x06, 0x19, 0x04, 0x18, 0x03, 0x17, 0x02, 0x14, 0x02, 0x12 },
			{ /* ASCII 75 'K' */
			21, 14, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x12, 0x04, 0x04, 0x12, 0x7f,
					0x09, 0x0d, 0x12, 0x19 },
			{ /* ASCII 76 'L' */
			17, 9, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x04, 0x19, 0x10, 0x19 },
			{ /* ASCII 77 'M' */
			24, 19, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x04, 0x04, 0x0c, 0x19, 0x7f,
					0x14, 0x04, 0x0c, 0x19, 0x7f, 0x14, 0x04, 0x14, 0x19 },
			{ /* ASCII 78 'N' */
			22, 14, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x04, 0x04, 0x12, 0x19, 0x7f,
					0x12, 0x04, 0x12, 0x19 },
			{ /* ASCII 79 'O' */
			22, 42, 0x09, 0x04, 0x07, 0x05, 0x05, 0x07, 0x04, 0x09, 0x03, 0x0c,
					0x03, 0x11, 0x04, 0x14, 0x05, 0x16, 0x07, 0x18, 0x09, 0x19,
					0x0d, 0x19, 0x0f, 0x18, 0x11, 0x16, 0x12, 0x14, 0x13, 0x11,
					0x13, 0x0c, 0x12, 0x09, 0x11, 0x07, 0x0f, 0x05, 0x0d, 0x04,
					0x09, 0x04 },
			{ /* ASCII 80 'P' */
			21, 25, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x04, 0x04, 0x0d, 0x04, 0x10,
					0x05, 0x11, 0x06, 0x12, 0x08, 0x12, 0x0b, 0x11, 0x0d, 0x10,
					0x0e, 0x0d, 0x0f, 0x04, 0x0f },
			{ /* ASCII 81 'Q' */
			22, 47, 0x09, 0x04, 0x07, 0x05, 0x05, 0x07, 0x04, 0x09, 0x03, 0x0c,
					0x03, 0x11, 0x04, 0x14, 0x05, 0x16, 0x07, 0x18, 0x09, 0x19,
					0x0d, 0x19, 0x0f, 0x18, 0x11, 0x16, 0x12, 0x14, 0x13, 0x11,
					0x13, 0x0c, 0x12, 0x09, 0x11, 0x07, 0x0f, 0x05, 0x0d, 0x04,
					0x09, 0x04, 0x7f, 0x0c, 0x15, 0x12, 0x1b },
			{ /* ASCII 82 'R' */
			21, 30, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x04, 0x04, 0x0d, 0x04, 0x10,
					0x05, 0x11, 0x06, 0x12, 0x08, 0x12, 0x0a, 0x11, 0x0c, 0x10,
					0x0d, 0x0d, 0x0e, 0x04, 0x0e, 0x7f, 0x0b, 0x0e, 0x12, 0x19 },
			{ /* ASCII 83 'S' */
			20, 40, 0x11, 0x07, 0x0f, 0x05, 0x0c, 0x04, 0x08, 0x04, 0x05, 0x05,
					0x03, 0x07, 0x03, 0x09, 0x04, 0x0b, 0x05, 0x0c, 0x07, 0x0d,
					0x0d, 0x0f, 0x0f, 0x10, 0x10, 0x11, 0x11, 0x13, 0x11, 0x16,
					0x0f, 0x18, 0x0c, 0x19, 0x08, 0x19, 0x05, 0x18, 0x03, 0x16 },
			{ /* ASCII 84 'T' */
			16, 9, 0x08, 0x04, 0x08, 0x19, 0x7f, 0x01, 0x04, 0x0f, 0x04 },
			{ /* ASCII 85 'U' */
			22, 20, 0x04, 0x04, 0x04, 0x13, 0x05, 0x16, 0x07, 0x18, 0x0a, 0x19,
					0x0c, 0x19, 0x0f, 0x18, 0x11, 0x16, 0x12, 0x13, 0x12, 0x04 },
			{ /* ASCII 86 'V' */
			18, 9, 0x01, 0x04, 0x09, 0x19, 0x7f, 0x11, 0x04, 0x09, 0x19 },
			{ /* ASCII 87 'W' */
			24, 19, 0x02, 0x04, 0x07, 0x19, 0x7f, 0x0c, 0x04, 0x07, 0x19, 0x7f,
					0x0c, 0x04, 0x11, 0x19, 0x7f, 0x16, 0x04, 0x11, 0x19 },
			{ /* ASCII 88 'X' */
			20, 9, 0x03, 0x04, 0x11, 0x19, 0x7f, 0x11, 0x04, 0x03, 0x19 },
			{ /* ASCII 89 'Y' */
			18, 11, 0x01, 0x04, 0x09, 0x0e, 0x09, 0x19, 0x7f, 0x11, 0x04, 0x09,
					0x0e },
			{ /* ASCII 90 'Z' */
			20, 14, 0x11, 0x04, 0x03, 0x19, 0x7f, 0x03, 0x04, 0x11, 0x04, 0x7f,
					0x03, 0x19, 0x11, 0x19 },
			{ /* ASCII 91 '[' */
			14, 19, 0x04, 0x00, 0x04, 0x20, 0x7f, 0x05, 0x00, 0x05, 0x20, 0x7f,
					0x04, 0x00, 0x0b, 0x00, 0x7f, 0x04, 0x20, 0x0b, 0x20 },
			{ /* ASCII 92 '\' */
			14, 4, 0x00, 0x04, 0x0e, 0x1c },
			{ /* ASCII 93 ']' */
			14, 19, 0x09, 0x00, 0x09, 0x20, 0x7f, 0x0a, 0x00, 0x0a, 0x20, 0x7f,
					0x03, 0x00, 0x0a, 0x00, 0x7f, 0x03, 0x20, 0x0a, 0x20 },
			{ /* ASCII 94 '^' */
			16, 18, 0x06, 0x0a, 0x08, 0x07, 0x0a, 0x0a, 0x7f, 0x03, 0x0d, 0x08,
					0x08, 0x0d, 0x0d, 0x7f, 0x08, 0x08, 0x08, 0x19 },
			{ /* ASCII 95 '_' */
			16, 4, 0x00, 0x1b, 0x10, 0x1b },
			{ /* ASCII 96 '`' */
			10, 14, 0x06, 0x04, 0x05, 0x05, 0x04, 0x07, 0x04, 0x09, 0x05, 0x0a,
					0x06, 0x09, 0x05, 0x08 },
			{ /* ASCII 97 'a' */
			19, 33, 0x0f, 0x0b, 0x0f, 0x19, 0x7f, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b,
					0x0b, 0x08, 0x0b, 0x06, 0x0c, 0x04, 0x0e, 0x03, 0x11, 0x03,
					0x13, 0x04, 0x16, 0x06, 0x18, 0x08, 0x19, 0x0b, 0x19, 0x0d,
					0x18, 0x0f, 0x16 },
			{ /* ASCII 98 'b' */
			19, 33, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x04, 0x0e, 0x06, 0x0c, 0x08,
					0x0b, 0x0b, 0x0b, 0x0d, 0x0c, 0x0f, 0x0e, 0x10, 0x11, 0x10,
					0x13, 0x0f, 0x16, 0x0d, 0x18, 0x0b, 0x19, 0x08, 0x19, 0x06,
					0x18, 0x04, 0x16 },
			{ /* ASCII 99 'c' */
			18, 28, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0b, 0x08, 0x0b, 0x06, 0x0c,
					0x04, 0x0e, 0x03, 0x11, 0x03, 0x13, 0x04, 0x16, 0x06, 0x18,
					0x08, 0x19, 0x0b, 0x19, 0x0d, 0x18, 0x0f, 0x16 },
			{ /* ASCII 100 'd' */
			19, 33, 0x0f, 0x04, 0x0f, 0x19, 0x7f, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b,
					0x0b, 0x08, 0x0b, 0x06, 0x0c, 0x04, 0x0e, 0x03, 0x11, 0x03,
					0x13, 0x04, 0x16, 0x06, 0x18, 0x08, 0x19, 0x0b, 0x19, 0x0d,
					0x18, 0x0f, 0x16 },
			{ /* ASCII 101 'e' */
			18, 34, 0x03, 0x11, 0x0f, 0x11, 0x0f, 0x0f, 0x0e, 0x0d, 0x0d, 0x0c,
					0x0b, 0x0b, 0x08, 0x0b, 0x06, 0x0c, 0x04, 0x0e, 0x03, 0x11,
					0x03, 0x13, 0x04, 0x16, 0x06, 0x18, 0x08, 0x19, 0x0b, 0x19,
					0x0d, 0x18, 0x0f, 0x16 },
			{ /* ASCII 102 'f' */
			12, 15, 0x0a, 0x04, 0x08, 0x04, 0x06, 0x05, 0x05, 0x08, 0x05, 0x19,
					0x7f, 0x02, 0x0b, 0x09, 0x0b },
			{ /* ASCII 103 'g' */
			19, 43, 0x0f, 0x0b, 0x0f, 0x1b, 0x0e, 0x1e, 0x0d, 0x1f, 0x0b, 0x20,
					0x08, 0x20, 0x06, 0x1f, 0x7f, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b,
					0x0b, 0x08, 0x0b, 0x06, 0x0c, 0x04, 0x0e, 0x03, 0x11, 0x03,
					0x13, 0x04, 0x16, 0x06, 0x18, 0x08, 0x19, 0x0b, 0x19, 0x0d,
					0x18, 0x0f, 0x16 },
			{ /* ASCII 104 'h' */
			19, 19, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x04, 0x0f, 0x07, 0x0c, 0x09,
					0x0b, 0x0c, 0x0b, 0x0e, 0x0c, 0x0f, 0x0f, 0x0f, 0x19 },
			{ /* ASCII 105 'i' */
			8, 15, 0x03, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x03, 0x03, 0x04,
					0x7f, 0x04, 0x0b, 0x04, 0x19 },
			{ /* ASCII 106 'j' */
			10, 21, 0x05, 0x04, 0x06, 0x05, 0x07, 0x04, 0x06, 0x03, 0x05, 0x04,
					0x7f, 0x06, 0x0b, 0x06, 0x1c, 0x05, 0x1f, 0x03, 0x20, 0x01,
					0x20 },
			{ /* ASCII 107 'k' */
			17, 14, 0x04, 0x04, 0x04, 0x19, 0x7f, 0x0e, 0x0b, 0x04, 0x15, 0x7f,
					0x08, 0x11, 0x0f, 0x19 },
			{ /* ASCII 108 'l' */
			8, 4, 0x04, 0x04, 0x04, 0x19 },
			{ /* ASCII 109 'm' */
			30, 34, 0x04, 0x0b, 0x04, 0x19, 0x7f, 0x04, 0x0f, 0x07, 0x0c, 0x09,
					0x0b, 0x0c, 0x0b, 0x0e, 0x0c, 0x0f, 0x0f, 0x0f, 0x19, 0x7f,
					0x0f, 0x0f, 0x12, 0x0c, 0x14, 0x0b, 0x17, 0x0b, 0x19, 0x0c,
					0x1a, 0x0f, 0x1a, 0x19 },
			{ /* ASCII 110 'n' */
			19, 19, 0x04, 0x0b, 0x04, 0x19, 0x7f, 0x04, 0x0f, 0x07, 0x0c, 0x09,
					0x0b, 0x0c, 0x0b, 0x0e, 0x0c, 0x0f, 0x0f, 0x0f, 0x19 },
			{ /* ASCII 111 'o' */
			19, 34, 0x08, 0x0b, 0x06, 0x0c, 0x04, 0x0e, 0x03, 0x11, 0x03, 0x13,
					0x04, 0x16, 0x06, 0x18, 0x08, 0x19, 0x0b, 0x19, 0x0d, 0x18,
					0x0f, 0x16, 0x10, 0x13, 0x10, 0x11, 0x0f, 0x0e, 0x0d, 0x0c,
					0x0b, 0x0b, 0x08, 0x0b },
			{ /* ASCII 112 'p' */
			19, 33, 0x04, 0x0b, 0x04, 0x20, 0x7f, 0x04, 0x0e, 0x06, 0x0c, 0x08,
					0x0b, 0x0b, 0x0b, 0x0d, 0x0c, 0x0f, 0x0e, 0x10, 0x11, 0x10,
					0x13, 0x0f, 0x16, 0x0d, 0x18, 0x0b, 0x19, 0x08, 0x19, 0x06,
					0x18, 0x04, 0x16 },
			{ /* ASCII 113 'q' */
			19, 33, 0x0f, 0x0b, 0x0f, 0x20, 0x7f, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b,
					0x0b, 0x08, 0x0b, 0x06, 0x0c, 0x04, 0x0e, 0x03, 0x11, 0x03,
					0x13, 0x04, 0x16, 0x06, 0x18, 0x08, 0x19, 0x0b, 0x19, 0x0d,
					0x18, 0x0f, 0x16 },
			{ /* ASCII 114 'r' */
			13, 15, 0x04, 0x0b, 0x04, 0x19, 0x7f, 0x04, 0x11, 0x05, 0x0e, 0x07,
					0x0c, 0x09, 0x0b, 0x0c, 0x0b },
			{ /* ASCII 115 's' */
			17, 34, 0x0e, 0x0e, 0x0d, 0x0c, 0x0a, 0x0b, 0x07, 0x0b, 0x04, 0x0c,
					0x03, 0x0e, 0x04, 0x10, 0x06, 0x11, 0x0b, 0x12, 0x0d, 0x13,
					0x0e, 0x15, 0x0e, 0x16, 0x0d, 0x18, 0x0a, 0x19, 0x07, 0x19,
					0x04, 0x18, 0x03, 0x16 },
			{ /* ASCII 116 't' */
			12, 15, 0x05, 0x04, 0x05, 0x15, 0x06, 0x18, 0x08, 0x19, 0x0a, 0x19,
					0x7f, 0x02, 0x0b, 0x09, 0x0b },
			{ /* ASCII 117 'u' */
			19, 19, 0x04, 0x0b, 0x04, 0x15, 0x05, 0x18, 0x07, 0x19, 0x0a, 0x19,
					0x0c, 0x18, 0x0f, 0x15, 0x7f, 0x0f, 0x0b, 0x0f, 0x19 },
			{ /* ASCII 118 'v' */
			16, 9, 0x02, 0x0b, 0x08, 0x19, 0x7f, 0x0e, 0x0b, 0x08, 0x19 },
			{ /* ASCII 119 'w' */
			22, 19, 0x03, 0x0b, 0x07, 0x19, 0x7f, 0x0b, 0x0b, 0x07, 0x19, 0x7f,
					0x0b, 0x0b, 0x0f, 0x19, 0x7f, 0x13, 0x0b, 0x0f, 0x19 },
			{ /* ASCII 120 'x' */
			17, 9, 0x03, 0x0b, 0x0e, 0x19, 0x7f, 0x0e, 0x0b, 0x03, 0x19 },
			{ /* ASCII 121 'y' */
			16, 17, 0x02, 0x0b, 0x08, 0x19, 0x7f, 0x0e, 0x0b, 0x08, 0x19, 0x06,
					0x1d, 0x04, 0x1f, 0x02, 0x20, 0x01, 0x20 },
			{ /* ASCII 122 'z' */
			17, 14, 0x0e, 0x0b, 0x03, 0x19, 0x7f, 0x03, 0x0b, 0x0e, 0x0b, 0x7f,
					0x03, 0x19, 0x0e, 0x19 },
			{ /* ASCII 123 '{' */
			14, 76, 0x09, 0x00, 0x07, 0x01, 0x06, 0x02, 0x05, 0x04, 0x05, 0x06,
					0x06, 0x08, 0x07, 0x09, 0x08, 0x0b, 0x08, 0x0d, 0x06, 0x0f,
					0x7f, 0x07, 0x01, 0x06, 0x03, 0x06, 0x05, 0x07, 0x07, 0x08,
					0x08, 0x09, 0x0a, 0x09, 0x0c, 0x08, 0x0e, 0x04, 0x10, 0x08,
					0x12, 0x09, 0x14, 0x09, 0x16, 0x08, 0x18, 0x07, 0x19, 0x06,
					0x1b, 0x06, 0x1d, 0x07, 0x1f, 0x7f, 0x06, 0x11, 0x08, 0x13,
					0x08, 0x15, 0x07, 0x17, 0x06, 0x18, 0x05, 0x1a, 0x05, 0x1c,
					0x06, 0x1e, 0x07, 0x1f, 0x09, 0x20 },
			{ /* ASCII 124 '|' */
			8, 4, 0x04, 0x00, 0x04, 0x20 },
			{ /* ASCII 125 '}' */
			14, 76, 0x05, 0x00, 0x07, 0x01, 0x08, 0x02, 0x09, 0x04, 0x09, 0x06,
					0x08, 0x08, 0x07, 0x09, 0x06, 0x0b, 0x06, 0x0d, 0x08, 0x0f,
					0x7f, 0x07, 0x01, 0x08, 0x03, 0x08, 0x05, 0x07, 0x07, 0x06,
					0x08, 0x05, 0x0a, 0x05, 0x0c, 0x06, 0x0e, 0x0a, 0x10, 0x06,
					0x12, 0x05, 0x14, 0x05, 0x16, 0x06, 0x18, 0x07, 0x19, 0x08,
					0x1b, 0x08, 0x1d, 0x07, 0x1f, 0x7f, 0x08, 0x11, 0x06, 0x13,
					0x06, 0x15, 0x07, 0x17, 0x08, 0x18, 0x09, 0x1a, 0x09, 0x1c,
					0x08, 0x1e, 0x07, 0x1f, 0x05, 0x20 },
			{ /* ASCII 126 '~' */
			24, 45, 0x03, 0x13, 0x03, 0x11, 0x04, 0x0e, 0x06, 0x0d, 0x08, 0x0d,
					0x0a, 0x0e, 0x0e, 0x11, 0x10, 0x12, 0x12, 0x12, 0x14, 0x11,
					0x15, 0x0f, 0x7f, 0x03, 0x11, 0x04, 0x0f, 0x06, 0x0e, 0x08,
					0x0e, 0x0a, 0x0f, 0x0e, 0x12, 0x10, 0x13, 0x12, 0x13, 0x14,
					0x12, 0x15, 0x0f, 0x15, 0x0d } };

	/**
	 * Dump font data in Assembler format.
	 */
	public void dumpASM ()
	{
		int nBytes = 0;
		System.out
				.println("; width, nts, points (if bit 7 is set, moveto else lineto)");
		System.out.println("CHR_TABLE:");
		for (int i = 0; i < charVector.length; i++)
		{
			System.out.println("DW CHR_" + (i + 32) + " ");
		}
		System.out.println();
		
		for (int i = 0; i < charVector.length; i++)
		{
			System.out.print("CHR_" + (i + 32) + ":   ");

			// count points
			int nPoints = 0;
			for (int j = 2; j < charVector[i].length; j++)
			{
				if (charVector[i][j] == 0x7F)
				{
					// set bit 7 for moveto
					;
				}
				else
				{
					nPoints++;
				}
			}

			System.out.print("DB " + charVector[i][0] + "," + nPoints);
			nBytes += 2;

			// clear bit 7 for first moveto
			int flag = 0x80;
			for (int j = 2; j < charVector[i].length; j++)
			{
				if (charVector[i][j] == 0x7F)
				{
					// set bit 7 for moveto
					flag = 0x80;
				}
				else
				{
					System.out.print(",0"
							+ Integer.toHexString(charVector[i][j] + flag)
							+ "H");
					nBytes++;
					// clear bit 7 for lineto
					flag = 0;
				}
			}
			System.out.print("     ; " + (char) (i + 32));
			System.out.println();
		}
		System.out.println(nBytes + " bytes");
		// System.exit(0);
	}

	/**
	 * 
	 * @param sx
	 *            - width in pixels
	 * @param sy
	 *            - height in pixels
	 */
	void setSize ( int sx, int sy )
	{
		m_sizeX = sx;
		m_sizeY = sy;
	}

	void setSpacing ( boolean monoSpaced )
	{
		m_monospaced = monoSpaced;
	}

	void setItalic ( boolean italic )
	{
		m_italic = italic;
	}

	/**
	 * Draw a string with this font.
	 * 
	 * @param g
	 *            - the context to draw on.
	 * @param s
	 *            - the string to draw.
	 * @param x
	 *            - starting point.
	 * @param y
	 *            - starting point.
	 */
	void drawString ( Graphics g, String s, int x, int y )
	{
		for (int i = 0; i < s.length(); i++)
		{
			char c = s.charAt(i);
			x += drawChar(g, c, x, y);
		}
	}

	/**
	 * Draw a single character.
	 * 
	 * @param g
	 *            - the context to draw on.
	 * @param c
	 *            - the character to draw.
	 * @param x
	 *            - starting point.
	 * @param y
	 *            - starting point.
	 * @return - the new x-coordinate to draw the next character
	 */
	int drawChar ( Graphics g, int c, int x, int y )
	{
		int ret = x;

		if (c >= 32 && c <= 126)
		{
			c -= 32;

			byte bb[] = charVector[c];

			int points = (int) bb[1];
			int width = (int) bb[0];

			// desired size in pixels
			int newWidth = m_sizeX;
			int newHeight = m_sizeY;

			float fx, fy;

			if (m_monospaced)
			{// massage into MONOSPACED, nominal character height: 22 units
				fx = (float) newHeight / 22f * (float) newWidth / (float) width;
			}
			else
			{
				// PROPORTIONAL, nominal character height: 22 units
				fx = (float) newHeight / 22f;
			}

			fy = (float) newHeight / 22f;

			// actual width
			width = (int) ((float) width * fx);

			ret = width;

			if (points > 0)
			{

				int xPrev = 0;
				int yPrev = 0;

				boolean first = true;
				int xPt = 127;

				for (int i = 2;;)
				{
					if (xPt == 127)
					{
						xPt = bb[i++] & 0xff;
						int yPt = bb[i++] & 0xff;

						if (m_italic)
							xPt -= (yPt - 22) / (2f * fx);

						xPrev = x + (int) (xPt * fx);
						yPrev = y + (int) (yPt * fy);
					}
					else
					{
						int yPt = bb[i++] & 0xff;
						if (m_italic)
							xPt -= (yPt - 22) / (2f * fx);

						xPt = x + (int) (xPt * fx);
						yPt = y + (int) (yPt * fy);
						g.drawLine(xPrev, yPrev, xPt, yPt);
						xPrev = xPt;
						yPrev = yPt;
					}

					// done?
					if (i == 2 + points)
						break;

					// next point
					xPt = bb[i++] & 0xff;
				}
			}
		}

		return ret;
	}
}
